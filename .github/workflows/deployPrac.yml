name: Deploy to Ec2

# 1. git push -> 2. github actions에서 빌드 & 압축
# 3. S3에게 압축파일 전송 -> 4. code deploy에게 배포를 하라고 명령
# 5. code deploy가 EC2에게 S3에서 다운받아서 실행하라고 명령

#code deploy를 사용하는 이유 : 단순히 github actions -> EC2에서는 할 수 없는 다양한 기능 제공 EX) 무중단 배포

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: github에서 push된 파일 가져오기
        uses: actions/checkout@v4

      - name: jdk 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts

      - name: AWS Resource에 접근할 수 있게 환경변수 가져오기
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://test-server-2/$GITHUB_SHA.tar.gz

      - name: code deploy를 이용해 EC2에 프로젝트 코드 배포
        run: aws deploy create-deployment # 배포를 생성해서 code deploy에 저장하는 명령어
            --application-name test-server # test-server에 배포를 생성한다
            --deployment-config-name CodeDeployDefault.AllAtOnce # instance들을 어떻게 배포할건지? 지금은 한번에 배포하기로 설정
            --deployment-group-name test # 배포 그룹 이름 "test"
            --s3-location bucket=test-server-2,bundleType=tgz,key=$GITHUB_SHA.tar.gz #key=$GITHUB_SHA.tar.gz는 S3에 저장된 파일 이름이다

