name: Deploy to Ec2

# 1. git push -> 2. github actions에서 빌드 & 압축
# 3. S3에게 압축파일 전송 -> 4. code deploy에게 배포를 하라고 명령
# 5. code deploy가 EC2에게 S3에서 다운받아서 실행하라고 명령

#code deploy를 사용하는 이유 : 단순히 github actions -> EC2에서는 할 수 없는 다양한 기능 제공 EX) 무중단 배포

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: github에서 push된 파일 가져오기
        uses: actions/checkout@v4

      - name: jdk 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트와 빌드 실행
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 환경변수 가져오기
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t cicdtest .

# 051826703458.dkr.ecr.ap-northeast-2.amazonaws.com/test/server
# ${{ steps.login-ecr.outputs.registry }}이것은 ECR주소에서 ${{ steps.login-ecr.outputs.registry }} 이부분을 의미한다.
      - name: Docker 이미지에 tag 붙이기
        run: docker tag cicdtest ${{ steps.login-ecr.outputs.registry }}/test/server:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/test/server:latest

      - name: ecr에 도커 이미지가 올라갔으면 이제 EC2에 접근해서 pull하고 실행한다.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop test-server || true
            docker rm test-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/test/server:latest
            docker run -d --name test-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/test/server:latest

